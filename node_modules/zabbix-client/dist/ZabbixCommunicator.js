"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ZabbixResponseException_1 = require("./ZabbixResponseException");
class ZabbixCommunicator {
    constructor(socket, method) {
        this.socket = socket;
        this.method = method;
    }
    call(params, noAuth) {
        return __awaiter(this, void 0, void 0, function* () {
            let response = {};
            try {
                response = yield this.socket.call(this.method, params, noAuth);
            }
            catch (error) {
                throw new ZabbixResponseException_1.ZabbixResponseException(error.message, response.config);
            }
            if (!response.data) {
                throw new ZabbixResponseException_1.ZabbixResponseException({
                    data: response.statusText,
                    message: response.statusText,
                    code: response.status
                }, response.config);
            }
            if (response.data && response.data.error) {
                throw new ZabbixResponseException_1.ZabbixResponseException(response.data.error, response.config);
            }
            return response.data.result;
        });
    }
}
exports.ZabbixCommunicator = ZabbixCommunicator;
