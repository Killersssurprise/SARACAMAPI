"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ZabbixCommunicator_1 = require("./ZabbixCommunicator");
class ZabbixAPI {
    constructor(socket) {
        this.socket = socket;
    }
    getHttpSocket() {
        return this.socket.getHttp();
    }
    getSocket() {
        return this.socket;
    }
    setReloginInterceptor(interceptor) {
        this.reloginInterceptor = interceptor;
    }
    login(username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.method('user.login').call({
                user: username,
                password,
            });
        });
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.method('user.logout').call([]);
            this.socket.setToken(null);
            if (this.reloginInterceptor) {
                this.getHttpSocket().interceptors.request.eject(this.reloginInterceptor);
            }
            return result;
        });
    }
    method(method) {
        return new ZabbixCommunicator_1.ZabbixCommunicator(this.socket, method);
    }
}
exports.ZabbixAPI = ZabbixAPI;
