"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
class ZabbixSocket {
    constructor(url) {
        this.token = null;
        this.http = axios_1.default.create({
            baseURL: url,
            headers: {
                Accept: 'application/json',
            },
            timeout: 40000,
            retries: 0,
        });
        this.http.interceptors.response.use(null, error => {
            if (error.code === 'ECONNABORTED' && error.config && error.config.retries < 3) {
                error.config.retries++;
                return this.http.request(error.config);
            }
            return Promise.reject(error);
        });
    }
    getHttp() {
        return this.http;
    }
    getToken() {
        return this.token;
    }
    setToken(token) {
        this.token = token;
        return this.token;
    }
    call(method, params, noAuth = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const id = Math.random()
                .toString()
                .substr(3);
            const data = {
                jsonrpc: '2.0',
                method,
                params,
                id,
                auth: this.token,
            };
            if (noAuth)
                data.auth = null;
            return yield this.http.post('', data);
        });
    }
}
exports.ZabbixSocket = ZabbixSocket;
